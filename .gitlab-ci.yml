# Node docker image on which this would be run
image: node:latest

variables:
   npm_config_cache: "$CI_PROJECT_DIR/.npm"
   NODE_ENV: 'test'

cache:
   key:
     files:
        - package.json
   paths:
      - .npm
      - node_modules

services:
   - mongo

stages:
  - install
  - build
  - test
  - staging
  - deploy
 
# Jobs:

install_dependencies:
  stage: install
  script:
    - npm  ci

Build_api:
  stage: build
  before_script:
     - npm run clean
  script:
    - npm run build

test_api:
  stage: test
  script:
    - npm test
  
deploy_staging:
  image: ruby:latest
  only:
    - develop
  stage: staging
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=movies-api-staging-suyu --api-key=f055509a-9960-4e00-8934-10f2970af9c9
    - echo "Deployed to staging server"


continuous_delivery:
  image: ruby:latest
  dependencies:
     - deploy_staging
  stage: deploy
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl 
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_DEPLOY --api-key=$HEROKU_API_KEY
    - echo "Deployed to production server"
  when: manual

continuous_deployment:
  image: ruby:latest
  dependencies:
     - deploy_staging
  only:
    - master
  stage: deploy
  before_script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
  script:  
    - dpl --provider=heroku --app=$HEROKU_APP_NAME_DEPLOY --api-key=$HEROKU_API_KEY
    - echo "Deployed to production server"
